import { useState, useRef } from 'react';
import './TextEditor.css';

function TextEditor({ onSynthesize, isLoading }) {
  const [text, setText] = useState('Xin ch√†o, t√¥i l√† tr·ª£ l√Ω ·∫£o. H√¥m nay t√¥i s·∫Ω gi√∫p b·∫°n chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ti·∫øng Vi·ªát.');
  const audioRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isPaused, setIsPaused] = useState(false);

  const handleSpeak = async () => {
    if (!text.trim()) {
      alert('Please enter some text to synthesize');
      return;
    }
    
    const audioUrl = await onSynthesize(text);
    if (audioUrl && audioRef.current) {
      audioRef.current.src = audioUrl;
      audioRef.current.play();
      setIsPlaying(true);
      setIsPaused(false);
    }
  };

  const handlePause = () => {
    if (audioRef.current && !audioRef.current.paused) {
      audioRef.current.pause();
      setIsPaused(true);
    }
  };

  const handleResume = () => {
    if (audioRef.current && audioRef.current.paused) {
      audioRef.current.play();
      setIsPaused(false);
    }
  };

  const handleStop = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
      setIsPaused(false);
    }
  };

  const handleClear = () => {
    setText('');
  };

  const handleAudioEnded = () => {
    setIsPlaying(false);
    setIsPaused(false);
  };

  const quickStartExamples = [
    {
      icon: 'üìñ',
      label: 'Narrate a story',
      text: "Anh ƒë√£ n√≥i r·∫±ng s·∫Ω lu√¥n ·ªü b√™n em. Nh∆∞ng khi m·ªçi th·ª© s·ª•p ƒë·ªï, khi em quay l·∫°i t√¨m ki·∫øm m·ªôt b·ªù vai‚Ä¶ anh ·ªü ƒë√¢u? Th√†nh ph·ªë n√†y ƒë√£ nghi·ªÅn n√°t em, c√≤n anh ch·ªâ ƒë·ª©ng nh√¨n, nh·∫•m nh√°p ly latte n·ª≠a c√† ph√™ n·ª≠a s·ªØa c·ªßa m√¨nh."
    },
    {
      icon: 'üòÑ',
      label: 'Tell a silly joke',
      text: "T·∫°i sao c√°c nh√† khoa h·ªçc kh√¥ng tin v√†o nguy√™n t·ª≠? V√¨ ch√∫ng t·∫°o ra m·ªçi th·ª©! V√† n√≥i v·ªÅ vi·ªác t·∫°o ra m·ªçi th·ª©, c√≥ b·∫°n ƒë√£ nghe v·ªÅ nh√† to√°n h·ªçc ƒëang s·ª£ c√°c s·ªë √¢m ch∆∞a? Anh ·∫•y s·∫Ω d·ª´ng l·∫°i ·ªü b·∫•t c·ª© ƒëi·ªÅu g√¨ ƒë·ªÉ tr√°nh ch√∫ng!"
    },
    {
      icon: 'üéôÔ∏è',
      label: 'Record an advertisement',
      text: "ƒê√¢y l√† ƒëi·ªán tho·∫°i th√¥ng minh m·ªõi nh·∫•t - SmartPhone Pro Max Ultra - n∆°i s·ª± s√°ng t·∫°o g·∫∑p ƒëi·ªÉm v·ªõi s·ª± ho√†n h·∫£o. V·ªõi m√†n h√¨nh s·∫Øc n√©t v√† hi·ªÉn th·ªã r√µ r√†ng, hi·ªáu su·∫•t nhanh ch√≥ng v√† camera ch·ª•p ·∫£nh v·ªõi ƒë·ªô ph√¢n gi·∫£i cao, c√≥ s·∫µn ngay t·∫°i c·ª≠a h√†ng g·∫ßn nh·∫•t c·ªßa b·∫°n."
    },
    {
      icon: 'üåç',
      label: 'Speak in different languages',
      text: "Xin ch√†o, t√¥i l√† Rachel. Bonjour, je m'appelle Rachel. Hola, me llamo Rachel. Ciao, mi chiamo Rachel. „Åì„Çì„Å´„Å°„ÅØ„ÄÅÁßÅ„ÅÆÂêçÂâç„ÅØ„É¨„Ç§„ÉÅ„Çß„É´„Åß„Åô„ÄÇ"
    },
    {
      icon: 'üé¨',
      label: 'Direct a dramatic movie scene',
      text: "C∆°n m∆∞a tr√∫t xu·ªëng nh∆∞ nh·ªØng gi·ªçt l·ªá t·ª´ thi√™n ƒë∆∞·ªùng, khi c√¥ ƒë·ª©ng ·ªü m√©p b·∫øn t√†u, nh√¨n ch·∫±m ch·∫±m v√†o m√†n ƒë√™m. ‚ÄúEm ch∆∞a bao gi·ªù mu·ªën m·ªçi chuy·ªán k·∫øt th√∫c nh∆∞ th·∫ø n√†y,‚Äù c√¥ th√¨ th·∫ßm, gi·ªçng ngh·∫πn l·∫°i. Nh∆∞ng ƒë·∫°i d∆∞∆°ng v·∫´n gi·ªØ k√≠n nh·ªØng b√≠ m·∫≠t c·ªßa n√≥ ‚Äî l·∫∑ng im v√† l·∫°nh l√πng."
    },
    {
      icon: 'üßò',
      label: 'Guide a meditation class',
      text: "H√≠t v√†o s√¢u... v√† th·ªü ra t·ª´ t·ª´. C·∫£m nh·∫≠n s·ª± tho·∫£i m√°i r·ªùi kh·ªèi c∆° th·ªÉ v·ªõi m·ªói h√≠t ra. B·∫°n y√™n tƒ©nh. B·∫°n ·ªü gi·ªØa. B·∫°n y√™n b√¨nh. ƒê·ªÉ t√¢m tr√≠ bay nh·∫π nh∆∞ l√° b√®o tr√™n h·ªì y√™n l·∫∑ng."
    }
  ];

  const handleQuickStart = (exampleText) => {
    setText(exampleText);
  };

  return (
    <div className="text-editor">
      <textarea
        className="text-input"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Type or paste text to synthesize..."
        disabled={isLoading}
      />
      
      {!text.trim() && (
        <div className="quick-start">
          <p className="quick-start-title">Get started with</p>
          <div className="quick-start-buttons">
            {quickStartExamples.map((example, index) => (
              <button
                key={index}
                className="quick-start-btn"
                onClick={() => handleQuickStart(example.text)}
                disabled={isLoading}
              >
                <span className="quick-start-icon">{example.icon}</span>
                <span className="quick-start-label">{example.label}</span>
              </button>
            ))}
          </div>
        </div>
      )}
      
      <div className="controls">
        <div className="controls-left">
          <button 
            className="btn btn-primary" 
            onClick={handleSpeak}
            disabled={isLoading || !text.trim()}
          >
            {isLoading ? '‚è≥ Generating...' : '‚ñ∂Ô∏é Speak'}
          </button>
          <button 
            className="btn btn-ghost" 
            onClick={handlePause}
            disabled={!isPlaying || isPaused}
          >
            ‚è∏ Pause
          </button>
          <button 
            className="btn btn-ghost" 
            onClick={handleResume}
            disabled={!isPaused}
          >
            ‚èµ Resume
          </button>
          <button 
            className="btn btn-ghost" 
            onClick={handleStop}
            disabled={!isPlaying && !isPaused}
          >
            ‚èπ Stop
          </button>
        </div>
        
        <div className="controls-right">
          <button 
            className="btn btn-ghost" 
            onClick={handleClear}
            title="Clear text"
          >
            ‚úï Clear
          </button>
        </div>
      </div>

      <audio
        ref={audioRef}
        className="audio-player"
        controls
        onEnded={handleAudioEnded}
      />
    </div>
  );
}

export default TextEditor;

